#ifndef freescale_mag_H
#define freescale_mag_H


void free_mag_init(void);
int free_mag_GetXData(void);
int free_mag_GetYData(void);
int free_mag_GetZData(void);


unsigned char free_mag_WriteReg(char address, char data);
unsigned char free_mag_ReadReg(char address);
unsigned char free_mag_GetScale();
unsigned char free_mag_SetScale(char scale);
void free_mag_ChangeMode(char Mode);
unsigned char free_mag_SetRate(char Rate);
unsigned char free_mag_GetRate();
void free_mag_GetTriplet(short *AxisData);

typedef enum {
    FREE_MAG_STANDBYMODE = 0,
    FREE_MAG_ACTIVEMODE,
    FREE_MAG_80HERTZ_16_OVERRATIO=0,
    FREE_MAG_40HERTZ_32_OVERRATIO,
    FREE_MAG_20HERTZ_64_OVERRATIO,
    FREE_MAG_10HERTZ_128_OVERRATIO,
    FREE_MAG_40HERTZ_16_OVERRATIO,
    FREE_MAG_20HERTZ_32_OVERRATIO,
    FREE_MAG_10HERTZ_64_OVERRATIO,
    FREE_MAG_5HERTZ_128_OVERRATIO,
    FREE_MAG_20HERTZ_16_OVERRATIO,
    FREE_MAG_10HERTZ_32_OVERRATIO,
    FREE_MAG_5HERTZ_64_OVERRATIO,
    FREE_MAG_2P5HERTZ_128_OVERRATIO,
    FREE_MAG_10HERTZ_16_OVERRATIO,
    FREE_MAG_5HERTZ_32_OVERRATIO,
    FREE_MAG_2P5HERTZ_64_OVERRATIO,
    FREE_MAG_1P25HERTZ_128_OVERRATIO,
    FREE_MAG_5HERTZ_16_OVERRATIO,
    FREE_MAG_2P5HERTZ_32_OVERRATIO,
    FREE_MAG_1P25HERTZ_64_OVERRATIO,
    FREE_MAG_0P63HERTZ_128_OVERRATIO,
    FREE_MAG_2P5HERTZ_16_OVERRATIO,
    FREE_MAG_1P25HERTZ_32_OVERRATIO,
    FREE_MAG_0P63HERTZ_64_OVERRATIO,
    FREE_MAG_0P31HERTZ_128_OVERRATIO,
    FREE_MAG_1P25HERTZ_16_OVERRATIO,
    FREE_MAG_0P63HERTZ_32_OVERRATIO,
    FREE_MAG_0P31HERTZ_64_OVERRATIO,
    FREE_MAG_0P16HERTZ_128_OVERRATIO,
    FREE_MAG_0P63HERTZ_16_OVERRATIO,
    FREE_MAG_0P31HERTZ_32_OVERRATIO,
    FREE_MAG_0P16HERTZ_64_OVERRATIO,
    FREE_MAG_0P08HERTZ_128_OVERRATIO,



} COMMANDS;
#endif